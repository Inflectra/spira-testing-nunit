//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace Inflectra.SpiraTest.AddOns.SpiraTestNUnitAddIn.SpiraTestExecute {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TestExecuteSoap", Namespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/")]
    public partial class TestExecute : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ConnectToProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveTestRunByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordTestRun2OperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordTestRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisconnectOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TestExecute() {
            this.Url = "http://localhost/SpiraTest/Services/TestExecute.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ConnectToProjectCompletedEventHandler ConnectToProjectCompleted;
        
        /// <remarks/>
        public event RetrieveTestRunByIdCompletedEventHandler RetrieveTestRunByIdCompleted;
        
        /// <remarks/>
        public event RecordTestRun2CompletedEventHandler RecordTestRun2Completed;
        
        /// <remarks/>
        public event RecordTestRunCompletedEventHandler RecordTestRunCompleted;
        
        /// <remarks/>
        public event AuthenticateCompletedEventHandler AuthenticateCompleted;
        
        /// <remarks/>
        public event DisconnectCompletedEventHandler DisconnectCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/ConnectToProject", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConnectToProject(int projectId) {
            object[] results = this.Invoke("ConnectToProject", new object[] {
                        projectId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConnectToProject(int projectId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConnectToProject", new object[] {
                        projectId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndConnectToProject(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectToProjectAsync(int projectId) {
            this.ConnectToProjectAsync(projectId, null);
        }
        
        /// <remarks/>
        public void ConnectToProjectAsync(int projectId, object userState) {
            if ((this.ConnectToProjectOperationCompleted == null)) {
                this.ConnectToProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectToProjectOperationCompleted);
            }
            this.InvokeAsync("ConnectToProject", new object[] {
                        projectId}, this.ConnectToProjectOperationCompleted, userState);
        }
        
        private void OnConnectToProjectOperationCompleted(object arg) {
            if ((this.ConnectToProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectToProjectCompleted(this, new ConnectToProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/RetrieveTestRunById", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TestRunData RetrieveTestRunById(int testRunId) {
            object[] results = this.Invoke("RetrieveTestRunById", new object[] {
                        testRunId});
            return ((TestRunData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveTestRunById(int testRunId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveTestRunById", new object[] {
                        testRunId}, callback, asyncState);
        }
        
        /// <remarks/>
        public TestRunData EndRetrieveTestRunById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TestRunData)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveTestRunByIdAsync(int testRunId) {
            this.RetrieveTestRunByIdAsync(testRunId, null);
        }
        
        /// <remarks/>
        public void RetrieveTestRunByIdAsync(int testRunId, object userState) {
            if ((this.RetrieveTestRunByIdOperationCompleted == null)) {
                this.RetrieveTestRunByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveTestRunByIdOperationCompleted);
            }
            this.InvokeAsync("RetrieveTestRunById", new object[] {
                        testRunId}, this.RetrieveTestRunByIdOperationCompleted, userState);
        }
        
        private void OnRetrieveTestRunByIdOperationCompleted(object arg) {
            if ((this.RetrieveTestRunByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveTestRunByIdCompleted(this, new RetrieveTestRunByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/RecordTestRun2", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RecordTestRun2(string userName, string password, int projectId, int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace) {
            object[] results = this.Invoke("RecordTestRun2", new object[] {
                        userName,
                        password,
                        projectId,
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRecordTestRun2(
                    string userName, 
                    string password, 
                    int projectId, 
                    int testerUserId, 
                    int testCaseId, 
                    int releaseId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("RecordTestRun2", new object[] {
                        userName,
                        password,
                        projectId,
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRecordTestRun2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RecordTestRun2Async(string userName, string password, int projectId, int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace) {
            this.RecordTestRun2Async(userName, password, projectId, testerUserId, testCaseId, releaseId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, null);
        }
        
        /// <remarks/>
        public void RecordTestRun2Async(string userName, string password, int projectId, int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace, object userState) {
            if ((this.RecordTestRun2OperationCompleted == null)) {
                this.RecordTestRun2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordTestRun2OperationCompleted);
            }
            this.InvokeAsync("RecordTestRun2", new object[] {
                        userName,
                        password,
                        projectId,
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace}, this.RecordTestRun2OperationCompleted, userState);
        }
        
        private void OnRecordTestRun2OperationCompleted(object arg) {
            if ((this.RecordTestRun2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordTestRun2Completed(this, new RecordTestRun2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/RecordTestRun", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RecordTestRun(int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace) {
            object[] results = this.Invoke("RecordTestRun", new object[] {
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRecordTestRun(int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RecordTestRun", new object[] {
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRecordTestRun(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RecordTestRunAsync(int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace) {
            this.RecordTestRunAsync(testerUserId, testCaseId, releaseId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, null);
        }
        
        /// <remarks/>
        public void RecordTestRunAsync(int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace, object userState) {
            if ((this.RecordTestRunOperationCompleted == null)) {
                this.RecordTestRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordTestRunOperationCompleted);
            }
            this.InvokeAsync("RecordTestRun", new object[] {
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace}, this.RecordTestRunOperationCompleted, userState);
        }
        
        private void OnRecordTestRunOperationCompleted(object arg) {
            if ((this.RecordTestRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordTestRunCompleted(this, new RecordTestRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/Authenticate", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Authenticate(string userName, string password) {
            object[] results = this.Invoke("Authenticate", new object[] {
                        userName,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthenticate(string userName, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Authenticate", new object[] {
                        userName,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAuthenticate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string userName, string password) {
            this.AuthenticateAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string userName, string password, object userState) {
            if ((this.AuthenticateOperationCompleted == null)) {
                this.AuthenticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateOperationCompleted);
            }
            this.InvokeAsync("Authenticate", new object[] {
                        userName,
                        password}, this.AuthenticateOperationCompleted, userState);
        }
        
        private void OnAuthenticateOperationCompleted(object arg) {
            if ((this.AuthenticateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateCompleted(this, new AuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/Disconnect", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Disconnect() {
            this.Invoke("Disconnect", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDisconnect(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Disconnect", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDisconnect(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DisconnectAsync() {
            this.DisconnectAsync(null);
        }
        
        /// <remarks/>
        public void DisconnectAsync(object userState) {
            if ((this.DisconnectOperationCompleted == null)) {
                this.DisconnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisconnectOperationCompleted);
            }
            this.InvokeAsync("Disconnect", new object[0], this.DisconnectOperationCompleted, userState);
        }
        
        private void OnDisconnectOperationCompleted(object arg) {
            if ((this.DisconnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisconnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TestRunData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TestRunData : global::System.Data.DataSet {
        
        private TestRunDataTable tableTestRun;
        
        private TestRunStepDataTable tableTestRunStep;
        
        private global::System.Data.DataRelation relationfkTestRunTestRunStep;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TestRunData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TestRunData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TestRun"] != null)) {
                    base.Tables.Add(new TestRunDataTable(ds.Tables["TestRun"]));
                }
                if ((ds.Tables["TestRunStep"] != null)) {
                    base.Tables.Add(new TestRunStepDataTable(ds.Tables["TestRunStep"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestRunDataTable TestRun {
            get {
                return this.tableTestRun;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestRunStepDataTable TestRunStep {
            get {
                return this.tableTestRunStep;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TestRunData cln = ((TestRunData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TestRun"] != null)) {
                    base.Tables.Add(new TestRunDataTable(ds.Tables["TestRun"]));
                }
                if ((ds.Tables["TestRunStep"] != null)) {
                    base.Tables.Add(new TestRunStepDataTable(ds.Tables["TestRunStep"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTestRun = ((TestRunDataTable)(base.Tables["TestRun"]));
            if ((initTable == true)) {
                if ((this.tableTestRun != null)) {
                    this.tableTestRun.InitVars();
                }
            }
            this.tableTestRunStep = ((TestRunStepDataTable)(base.Tables["TestRunStep"]));
            if ((initTable == true)) {
                if ((this.tableTestRunStep != null)) {
                    this.tableTestRunStep.InitVars();
                }
            }
            this.relationfkTestRunTestRunStep = this.Relations["fkTestRunTestRunStep"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TestRunData";
            this.Prefix = "";
            this.Namespace = "http://www.inflectra.com/SpiraTest/DataSets/TestRunDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTestRun = new TestRunDataTable();
            base.Tables.Add(this.tableTestRun);
            this.tableTestRunStep = new TestRunStepDataTable();
            base.Tables.Add(this.tableTestRunStep);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("fkTestRunTestRunStep", new global::System.Data.DataColumn[] {
                        this.tableTestRun.TestRunIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestRunStep.TestRunIdColumn});
            this.tableTestRunStep.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationfkTestRunTestRunStep = new global::System.Data.DataRelation("fkTestRunTestRunStep", new global::System.Data.DataColumn[] {
                        this.tableTestRun.TestRunIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestRunStep.TestRunIdColumn}, false);
            this.Relations.Add(this.relationfkTestRunTestRunStep);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestRun() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestRunStep() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TestRunData ds = new TestRunData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TestRunRowChangeEventHandler(object sender, TestRunRowChangeEvent e);
        
        public delegate void TestRunStepRowChangeEventHandler(object sender, TestRunStepRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestRunDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTestRunId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnTestCaseId;
            
            private global::System.Data.DataColumn columnTestRunTypeId;
            
            private global::System.Data.DataColumn columnTesterId;
            
            private global::System.Data.DataColumn columnExecutionStatusId;
            
            private global::System.Data.DataColumn columnReleaseId;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnRunnerName;
            
            private global::System.Data.DataColumn columnRunnerTestName;
            
            private global::System.Data.DataColumn columnRunnerAssertCount;
            
            private global::System.Data.DataColumn columnRunnerMessage;
            
            private global::System.Data.DataColumn columnRunnerStackTrace;
            
            private global::System.Data.DataColumn columnTestRunTypeName;
            
            private global::System.Data.DataColumn columnTesterName;
            
            private global::System.Data.DataColumn columnExecutionStatusName;
            
            private global::System.Data.DataColumn columnReleaseName;
            
            private global::System.Data.DataColumn columnReleaseVersionNumber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunDataTable() {
                this.TableName = "TestRun";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRunDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestRunDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRunIdColumn {
                get {
                    return this.columnTestRunId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestCaseIdColumn {
                get {
                    return this.columnTestCaseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRunTypeIdColumn {
                get {
                    return this.columnTestRunTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TesterIdColumn {
                get {
                    return this.columnTesterId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionStatusIdColumn {
                get {
                    return this.columnExecutionStatusId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReleaseIdColumn {
                get {
                    return this.columnReleaseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunnerNameColumn {
                get {
                    return this.columnRunnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunnerTestNameColumn {
                get {
                    return this.columnRunnerTestName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunnerAssertCountColumn {
                get {
                    return this.columnRunnerAssertCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunnerMessageColumn {
                get {
                    return this.columnRunnerMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunnerStackTraceColumn {
                get {
                    return this.columnRunnerStackTrace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRunTypeNameColumn {
                get {
                    return this.columnTestRunTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TesterNameColumn {
                get {
                    return this.columnTesterName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionStatusNameColumn {
                get {
                    return this.columnExecutionStatusName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReleaseNameColumn {
                get {
                    return this.columnReleaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReleaseVersionNumberColumn {
                get {
                    return this.columnReleaseVersionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow this[int index] {
                get {
                    return ((TestRunRow)(this.Rows[index]));
                }
            }
            
            public event TestRunRowChangeEventHandler TestRunRowChanging;
            
            public event TestRunRowChangeEventHandler TestRunRowChanged;
            
            public event TestRunRowChangeEventHandler TestRunRowDeleting;
            
            public event TestRunRowChangeEventHandler TestRunRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestRunRow(TestRunRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow AddTestRunRow(
                        string Name, 
                        int TestCaseId, 
                        int TestRunTypeId, 
                        int TesterId, 
                        int ExecutionStatusId, 
                        int ReleaseId, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string RunnerName, 
                        string RunnerTestName, 
                        int RunnerAssertCount, 
                        string RunnerMessage, 
                        string RunnerStackTrace, 
                        string TestRunTypeName, 
                        string TesterName, 
                        string ExecutionStatusName, 
                        string ReleaseName, 
                        string ReleaseVersionNumber) {
                TestRunRow rowTestRunRow = ((TestRunRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        TestCaseId,
                        TestRunTypeId,
                        TesterId,
                        ExecutionStatusId,
                        ReleaseId,
                        StartDate,
                        EndDate,
                        RunnerName,
                        RunnerTestName,
                        RunnerAssertCount,
                        RunnerMessage,
                        RunnerStackTrace,
                        TestRunTypeName,
                        TesterName,
                        ExecutionStatusName,
                        ReleaseName,
                        ReleaseVersionNumber};
                rowTestRunRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestRunRow);
                return rowTestRunRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow FindByTestRunId(int TestRunId) {
                return ((TestRunRow)(this.Rows.Find(new object[] {
                            TestRunId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestRunDataTable cln = ((TestRunDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestRunDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestRunId = base.Columns["TestRunId"];
                this.columnName = base.Columns["Name"];
                this.columnTestCaseId = base.Columns["TestCaseId"];
                this.columnTestRunTypeId = base.Columns["TestRunTypeId"];
                this.columnTesterId = base.Columns["TesterId"];
                this.columnExecutionStatusId = base.Columns["ExecutionStatusId"];
                this.columnReleaseId = base.Columns["ReleaseId"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnRunnerName = base.Columns["RunnerName"];
                this.columnRunnerTestName = base.Columns["RunnerTestName"];
                this.columnRunnerAssertCount = base.Columns["RunnerAssertCount"];
                this.columnRunnerMessage = base.Columns["RunnerMessage"];
                this.columnRunnerStackTrace = base.Columns["RunnerStackTrace"];
                this.columnTestRunTypeName = base.Columns["TestRunTypeName"];
                this.columnTesterName = base.Columns["TesterName"];
                this.columnExecutionStatusName = base.Columns["ExecutionStatusName"];
                this.columnReleaseName = base.Columns["ReleaseName"];
                this.columnReleaseVersionNumber = base.Columns["ReleaseVersionNumber"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestRunId = new global::System.Data.DataColumn("TestRunId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestRunId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnTestCaseId = new global::System.Data.DataColumn("TestCaseId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseId);
                this.columnTestRunTypeId = new global::System.Data.DataColumn("TestRunTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestRunTypeId);
                this.columnTesterId = new global::System.Data.DataColumn("TesterId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTesterId);
                this.columnExecutionStatusId = new global::System.Data.DataColumn("ExecutionStatusId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionStatusId);
                this.columnReleaseId = new global::System.Data.DataColumn("ReleaseId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReleaseId);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnRunnerName = new global::System.Data.DataColumn("RunnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunnerName);
                this.columnRunnerTestName = new global::System.Data.DataColumn("RunnerTestName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunnerTestName);
                this.columnRunnerAssertCount = new global::System.Data.DataColumn("RunnerAssertCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunnerAssertCount);
                this.columnRunnerMessage = new global::System.Data.DataColumn("RunnerMessage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunnerMessage);
                this.columnRunnerStackTrace = new global::System.Data.DataColumn("RunnerStackTrace", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunnerStackTrace);
                this.columnTestRunTypeName = new global::System.Data.DataColumn("TestRunTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestRunTypeName);
                this.columnTesterName = new global::System.Data.DataColumn("TesterName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTesterName);
                this.columnExecutionStatusName = new global::System.Data.DataColumn("ExecutionStatusName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionStatusName);
                this.columnReleaseName = new global::System.Data.DataColumn("ReleaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReleaseName);
                this.columnReleaseVersionNumber = new global::System.Data.DataColumn("ReleaseVersionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReleaseVersionNumber);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("pkTestRun", new global::System.Data.DataColumn[] {
                                this.columnTestRunId}, true));
                this.columnTestRunId.AutoIncrement = true;
                this.columnTestRunId.AllowDBNull = false;
                this.columnTestRunId.ReadOnly = true;
                this.columnTestRunId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnTestCaseId.AllowDBNull = false;
                this.columnTestRunTypeId.AllowDBNull = false;
                this.columnTesterId.AllowDBNull = false;
                this.columnExecutionStatusId.AllowDBNull = false;
                this.columnStartDate.AllowDBNull = false;
                this.columnTestRunTypeName.ReadOnly = true;
                this.columnTesterName.ReadOnly = true;
                this.columnExecutionStatusName.ReadOnly = true;
                this.columnReleaseName.ReadOnly = true;
                this.columnReleaseVersionNumber.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow NewTestRunRow() {
                return ((TestRunRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestRunRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestRunRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestRunRowChanged != null)) {
                    this.TestRunRowChanged(this, new TestRunRowChangeEvent(((TestRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestRunRowChanging != null)) {
                    this.TestRunRowChanging(this, new TestRunRowChangeEvent(((TestRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestRunRowDeleted != null)) {
                    this.TestRunRowDeleted(this, new TestRunRowChangeEvent(((TestRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestRunRowDeleting != null)) {
                    this.TestRunRowDeleting(this, new TestRunRowChangeEvent(((TestRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestRunRow(TestRunRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TestRunData ds = new TestRunData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestRunDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestRunStepDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTestRunStepId;
            
            private global::System.Data.DataColumn columnTestRunId;
            
            private global::System.Data.DataColumn columnTestStepId;
            
            private global::System.Data.DataColumn columnExecutionStatusId;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnPosition;
            
            private global::System.Data.DataColumn columnExpectedResult;
            
            private global::System.Data.DataColumn columnSampleData;
            
            private global::System.Data.DataColumn columnActualResult;
            
            private global::System.Data.DataColumn columnIncidentName;
            
            private global::System.Data.DataColumn columnExecutionStatusName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepDataTable() {
                this.TableName = "TestRunStep";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRunStepDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestRunStepDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRunStepIdColumn {
                get {
                    return this.columnTestRunStepId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRunIdColumn {
                get {
                    return this.columnTestRunId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestStepIdColumn {
                get {
                    return this.columnTestStepId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionStatusIdColumn {
                get {
                    return this.columnExecutionStatusId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionColumn {
                get {
                    return this.columnPosition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpectedResultColumn {
                get {
                    return this.columnExpectedResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleDataColumn {
                get {
                    return this.columnSampleData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualResultColumn {
                get {
                    return this.columnActualResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncidentNameColumn {
                get {
                    return this.columnIncidentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionStatusNameColumn {
                get {
                    return this.columnExecutionStatusName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow this[int index] {
                get {
                    return ((TestRunStepRow)(this.Rows[index]));
                }
            }
            
            public event TestRunStepRowChangeEventHandler TestRunStepRowChanging;
            
            public event TestRunStepRowChangeEventHandler TestRunStepRowChanged;
            
            public event TestRunStepRowChangeEventHandler TestRunStepRowDeleting;
            
            public event TestRunStepRowChangeEventHandler TestRunStepRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestRunStepRow(TestRunStepRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow AddTestRunStepRow(TestRunRow parentTestRunRowByfkTestRunTestRunStep, int TestStepId, int ExecutionStatusId, string Description, int Position, string ExpectedResult, string SampleData, string ActualResult, string IncidentName, string ExecutionStatusName) {
                TestRunStepRow rowTestRunStepRow = ((TestRunStepRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        TestStepId,
                        ExecutionStatusId,
                        Description,
                        Position,
                        ExpectedResult,
                        SampleData,
                        ActualResult,
                        IncidentName,
                        ExecutionStatusName};
                if ((parentTestRunRowByfkTestRunTestRunStep != null)) {
                    columnValuesArray[1] = parentTestRunRowByfkTestRunTestRunStep[0];
                }
                rowTestRunStepRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestRunStepRow);
                return rowTestRunStepRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow FindByTestRunStepId(int TestRunStepId) {
                return ((TestRunStepRow)(this.Rows.Find(new object[] {
                            TestRunStepId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestRunStepDataTable cln = ((TestRunStepDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestRunStepDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestRunStepId = base.Columns["TestRunStepId"];
                this.columnTestRunId = base.Columns["TestRunId"];
                this.columnTestStepId = base.Columns["TestStepId"];
                this.columnExecutionStatusId = base.Columns["ExecutionStatusId"];
                this.columnDescription = base.Columns["Description"];
                this.columnPosition = base.Columns["Position"];
                this.columnExpectedResult = base.Columns["ExpectedResult"];
                this.columnSampleData = base.Columns["SampleData"];
                this.columnActualResult = base.Columns["ActualResult"];
                this.columnIncidentName = base.Columns["IncidentName"];
                this.columnExecutionStatusName = base.Columns["ExecutionStatusName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestRunStepId = new global::System.Data.DataColumn("TestRunStepId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestRunStepId);
                this.columnTestRunId = new global::System.Data.DataColumn("TestRunId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestRunId);
                this.columnTestStepId = new global::System.Data.DataColumn("TestStepId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestStepId);
                this.columnExecutionStatusId = new global::System.Data.DataColumn("ExecutionStatusId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionStatusId);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnPosition = new global::System.Data.DataColumn("Position", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosition);
                this.columnExpectedResult = new global::System.Data.DataColumn("ExpectedResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpectedResult);
                this.columnSampleData = new global::System.Data.DataColumn("SampleData", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleData);
                this.columnActualResult = new global::System.Data.DataColumn("ActualResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualResult);
                this.columnIncidentName = new global::System.Data.DataColumn("IncidentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncidentName);
                this.columnExecutionStatusName = new global::System.Data.DataColumn("ExecutionStatusName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionStatusName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("pkTestRunStep", new global::System.Data.DataColumn[] {
                                this.columnTestRunStepId}, true));
                this.columnTestRunStepId.AutoIncrement = true;
                this.columnTestRunStepId.AllowDBNull = false;
                this.columnTestRunStepId.ReadOnly = true;
                this.columnTestRunStepId.Unique = true;
                this.columnTestRunId.AllowDBNull = false;
                this.columnExecutionStatusId.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnPosition.AllowDBNull = false;
                this.columnExecutionStatusName.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow NewTestRunStepRow() {
                return ((TestRunStepRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestRunStepRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestRunStepRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestRunStepRowChanged != null)) {
                    this.TestRunStepRowChanged(this, new TestRunStepRowChangeEvent(((TestRunStepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestRunStepRowChanging != null)) {
                    this.TestRunStepRowChanging(this, new TestRunStepRowChangeEvent(((TestRunStepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestRunStepRowDeleted != null)) {
                    this.TestRunStepRowDeleted(this, new TestRunStepRowChangeEvent(((TestRunStepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestRunStepRowDeleting != null)) {
                    this.TestRunStepRowDeleting(this, new TestRunStepRowChangeEvent(((TestRunStepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestRunStepRow(TestRunStepRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TestRunData ds = new TestRunData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestRunStepDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestRunRow : global::System.Data.DataRow {
            
            private TestRunDataTable tableTestRun;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRunRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestRun = ((TestRunDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestRunId {
                get {
                    return ((int)(this[this.tableTestRun.TestRunIdColumn]));
                }
                set {
                    this[this.tableTestRun.TestRunIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTestRun.NameColumn]));
                }
                set {
                    this[this.tableTestRun.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestCaseId {
                get {
                    return ((int)(this[this.tableTestRun.TestCaseIdColumn]));
                }
                set {
                    this[this.tableTestRun.TestCaseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestRunTypeId {
                get {
                    return ((int)(this[this.tableTestRun.TestRunTypeIdColumn]));
                }
                set {
                    this[this.tableTestRun.TestRunTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TesterId {
                get {
                    return ((int)(this[this.tableTestRun.TesterIdColumn]));
                }
                set {
                    this[this.tableTestRun.TesterIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExecutionStatusId {
                get {
                    return ((int)(this[this.tableTestRun.ExecutionStatusIdColumn]));
                }
                set {
                    this[this.tableTestRun.ExecutionStatusIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReleaseId {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.ReleaseIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReleaseId\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ReleaseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTestRun.StartDateColumn]));
                }
                set {
                    this[this.tableTestRun.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTestRun.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunnerName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.RunnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunnerName\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunnerTestName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.RunnerTestNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunnerTestName\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerTestNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RunnerAssertCount {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.RunnerAssertCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunnerAssertCount\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerAssertCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunnerMessage {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.RunnerMessageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunnerMessage\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerMessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunnerStackTrace {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.RunnerStackTraceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunnerStackTrace\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerStackTraceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestRunTypeName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.TestRunTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestRunTypeName\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.TestRunTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TesterName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.TesterNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TesterName\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.TesterNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExecutionStatusName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.ExecutionStatusNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecutionStatusName\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ExecutionStatusNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReleaseName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.ReleaseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReleaseName\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ReleaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReleaseVersionNumber {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.ReleaseVersionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReleaseVersionNumber\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ReleaseVersionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReleaseIdNull() {
                return this.IsNull(this.tableTestRun.ReleaseIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReleaseIdNull() {
                this[this.tableTestRun.ReleaseIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableTestRun.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableTestRun.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunnerNameNull() {
                return this.IsNull(this.tableTestRun.RunnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunnerNameNull() {
                this[this.tableTestRun.RunnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunnerTestNameNull() {
                return this.IsNull(this.tableTestRun.RunnerTestNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunnerTestNameNull() {
                this[this.tableTestRun.RunnerTestNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunnerAssertCountNull() {
                return this.IsNull(this.tableTestRun.RunnerAssertCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunnerAssertCountNull() {
                this[this.tableTestRun.RunnerAssertCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunnerMessageNull() {
                return this.IsNull(this.tableTestRun.RunnerMessageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunnerMessageNull() {
                this[this.tableTestRun.RunnerMessageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunnerStackTraceNull() {
                return this.IsNull(this.tableTestRun.RunnerStackTraceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunnerStackTraceNull() {
                this[this.tableTestRun.RunnerStackTraceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestRunTypeNameNull() {
                return this.IsNull(this.tableTestRun.TestRunTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestRunTypeNameNull() {
                this[this.tableTestRun.TestRunTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTesterNameNull() {
                return this.IsNull(this.tableTestRun.TesterNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTesterNameNull() {
                this[this.tableTestRun.TesterNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecutionStatusNameNull() {
                return this.IsNull(this.tableTestRun.ExecutionStatusNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecutionStatusNameNull() {
                this[this.tableTestRun.ExecutionStatusNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReleaseNameNull() {
                return this.IsNull(this.tableTestRun.ReleaseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReleaseNameNull() {
                this[this.tableTestRun.ReleaseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReleaseVersionNumberNull() {
                return this.IsNull(this.tableTestRun.ReleaseVersionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReleaseVersionNumberNull() {
                this[this.tableTestRun.ReleaseVersionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow[] GetTestRunStepRows() {
                if ((this.Table.ChildRelations["fkTestRunTestRunStep"] == null)) {
                    return new TestRunStepRow[0];
                }
                else {
                    return ((TestRunStepRow[])(base.GetChildRows(this.Table.ChildRelations["fkTestRunTestRunStep"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestRunStepRow : global::System.Data.DataRow {
            
            private TestRunStepDataTable tableTestRunStep;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRunStepRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestRunStep = ((TestRunStepDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestRunStepId {
                get {
                    return ((int)(this[this.tableTestRunStep.TestRunStepIdColumn]));
                }
                set {
                    this[this.tableTestRunStep.TestRunStepIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestRunId {
                get {
                    return ((int)(this[this.tableTestRunStep.TestRunIdColumn]));
                }
                set {
                    this[this.tableTestRunStep.TestRunIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestStepId {
                get {
                    try {
                        return ((int)(this[this.tableTestRunStep.TestStepIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestStepId\' in table \'TestRunStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.TestStepIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExecutionStatusId {
                get {
                    return ((int)(this[this.tableTestRunStep.ExecutionStatusIdColumn]));
                }
                set {
                    this[this.tableTestRunStep.ExecutionStatusIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableTestRunStep.DescriptionColumn]));
                }
                set {
                    this[this.tableTestRunStep.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Position {
                get {
                    return ((int)(this[this.tableTestRunStep.PositionColumn]));
                }
                set {
                    this[this.tableTestRunStep.PositionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpectedResult {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.ExpectedResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpectedResult\' in table \'TestRunStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.ExpectedResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleData {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.SampleDataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SampleData\' in table \'TestRunStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.SampleDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActualResult {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.ActualResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualResult\' in table \'TestRunStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.ActualResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IncidentName {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.IncidentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncidentName\' in table \'TestRunStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.IncidentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExecutionStatusName {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.ExecutionStatusNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecutionStatusName\' in table \'TestRunStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.ExecutionStatusNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow TestRunRow {
                get {
                    return ((TestRunRow)(this.GetParentRow(this.Table.ParentRelations["fkTestRunTestRunStep"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fkTestRunTestRunStep"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestStepIdNull() {
                return this.IsNull(this.tableTestRunStep.TestStepIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestStepIdNull() {
                this[this.tableTestRunStep.TestStepIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpectedResultNull() {
                return this.IsNull(this.tableTestRunStep.ExpectedResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpectedResultNull() {
                this[this.tableTestRunStep.ExpectedResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleDataNull() {
                return this.IsNull(this.tableTestRunStep.SampleDataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleDataNull() {
                this[this.tableTestRunStep.SampleDataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualResultNull() {
                return this.IsNull(this.tableTestRunStep.ActualResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualResultNull() {
                this[this.tableTestRunStep.ActualResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncidentNameNull() {
                return this.IsNull(this.tableTestRunStep.IncidentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncidentNameNull() {
                this[this.tableTestRunStep.IncidentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecutionStatusNameNull() {
                return this.IsNull(this.tableTestRunStep.ExecutionStatusNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecutionStatusNameNull() {
                this[this.tableTestRunStep.ExecutionStatusNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestRunRowChangeEvent : global::System.EventArgs {
            
            private TestRunRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRowChangeEvent(TestRunRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestRunStepRowChangeEvent : global::System.EventArgs {
            
            private TestRunStepRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRowChangeEvent(TestRunStepRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void ConnectToProjectCompletedEventHandler(object sender, ConnectToProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectToProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectToProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RetrieveTestRunByIdCompletedEventHandler(object sender, RetrieveTestRunByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveTestRunByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveTestRunByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TestRunData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TestRunData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RecordTestRun2CompletedEventHandler(object sender, RecordTestRun2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordTestRun2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordTestRun2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RecordTestRunCompletedEventHandler(object sender, RecordTestRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordTestRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordTestRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void AuthenticateCompletedEventHandler(object sender, AuthenticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void DisconnectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591