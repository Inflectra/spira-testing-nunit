//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2032.
// 
namespace Inflectra.SpiraTest.AddOns.SpiraTestNUnitAddIn.SpiraTestExecute {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TestExecuteSoap", Namespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/")]
    public class TestExecute : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public TestExecute() {
            this.Url = "http://localhost/SpiraTest/Services/TestExecute.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/ConnectToProject", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConnectToProject(int projectId) {
            object[] results = this.Invoke("ConnectToProject", new object[] {
                        projectId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConnectToProject(int projectId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConnectToProject", new object[] {
                        projectId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndConnectToProject(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/RetrieveTestRunById", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TestRunData RetrieveTestRunById(int testRunId) {
            object[] results = this.Invoke("RetrieveTestRunById", new object[] {
                        testRunId});
            return ((TestRunData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRetrieveTestRunById(int testRunId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RetrieveTestRunById", new object[] {
                        testRunId}, callback, asyncState);
        }
        
        /// <remarks/>
        public TestRunData EndRetrieveTestRunById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TestRunData)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/RecordTestRun2", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RecordTestRun2(string userName, string password, int projectId, int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace) {
            object[] results = this.Invoke("RecordTestRun2", new object[] {
                        userName,
                        password,
                        projectId,
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRecordTestRun2(
                    string userName, 
                    string password, 
                    int projectId, 
                    int testerUserId, 
                    int testCaseId, 
                    int releaseId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("RecordTestRun2", new object[] {
                        userName,
                        password,
                        projectId,
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRecordTestRun2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/RecordTestRun", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RecordTestRun(int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace) {
            object[] results = this.Invoke("RecordTestRun", new object[] {
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRecordTestRun(int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RecordTestRun", new object[] {
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRecordTestRun(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/Authenticate", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Authenticate(string userName, string password) {
            object[] results = this.Invoke("Authenticate", new object[] {
                        userName,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthenticate(string userName, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Authenticate", new object[] {
                        userName,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndAuthenticate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/Disconnect", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Disconnect() {
            this.Invoke("Disconnect", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDisconnect(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Disconnect", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDisconnect(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
    }
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class TestRunData : DataSet {
        
        private TestRunDataTable tableTestRun;
        
        private TestRunStepDataTable tableTestRunStep;
        
        private DataRelation relationfkTestRunTestRunStep;
        
        public TestRunData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected TestRunData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TestRun"] != null)) {
                    this.Tables.Add(new TestRunDataTable(ds.Tables["TestRun"]));
                }
                if ((ds.Tables["TestRunStep"] != null)) {
                    this.Tables.Add(new TestRunStepDataTable(ds.Tables["TestRunStep"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestRunDataTable TestRun {
            get {
                return this.tableTestRun;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestRunStepDataTable TestRunStep {
            get {
                return this.tableTestRunStep;
            }
        }
        
        public override DataSet Clone() {
            TestRunData cln = ((TestRunData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["TestRun"] != null)) {
                this.Tables.Add(new TestRunDataTable(ds.Tables["TestRun"]));
            }
            if ((ds.Tables["TestRunStep"] != null)) {
                this.Tables.Add(new TestRunStepDataTable(ds.Tables["TestRunStep"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTestRun = ((TestRunDataTable)(this.Tables["TestRun"]));
            if ((this.tableTestRun != null)) {
                this.tableTestRun.InitVars();
            }
            this.tableTestRunStep = ((TestRunStepDataTable)(this.Tables["TestRunStep"]));
            if ((this.tableTestRunStep != null)) {
                this.tableTestRunStep.InitVars();
            }
            this.relationfkTestRunTestRunStep = this.Relations["fkTestRunTestRunStep"];
        }
        
        private void InitClass() {
            this.DataSetName = "TestRunData";
            this.Prefix = "";
            this.Namespace = "http://www.inflectra.com/SpiraTest/DataSets/TestRunDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTestRun = new TestRunDataTable();
            this.Tables.Add(this.tableTestRun);
            this.tableTestRunStep = new TestRunStepDataTable();
            this.Tables.Add(this.tableTestRunStep);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("fkTestRunTestRunStep", new DataColumn[] {
                        this.tableTestRun.TestRunIdColumn}, new DataColumn[] {
                        this.tableTestRunStep.TestRunIdColumn});
            this.tableTestRunStep.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationfkTestRunTestRunStep = new DataRelation("fkTestRunTestRunStep", new DataColumn[] {
                        this.tableTestRun.TestRunIdColumn}, new DataColumn[] {
                        this.tableTestRunStep.TestRunIdColumn}, false);
            this.Relations.Add(this.relationfkTestRunTestRunStep);
        }
        
        private bool ShouldSerializeTestRun() {
            return false;
        }
        
        private bool ShouldSerializeTestRunStep() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TestRunRowChangeEventHandler(object sender, TestRunRowChangeEvent e);
        
        public delegate void TestRunStepRowChangeEventHandler(object sender, TestRunStepRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TestRunDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTestRunId;
            
            private DataColumn columnName;
            
            private DataColumn columnTestCaseId;
            
            private DataColumn columnTestRunTypeId;
            
            private DataColumn columnTesterId;
            
            private DataColumn columnExecutionStatusId;
            
            private DataColumn columnReleaseId;
            
            private DataColumn columnStartDate;
            
            private DataColumn columnEndDate;
            
            private DataColumn columnRunnerName;
            
            private DataColumn columnRunnerTestName;
            
            private DataColumn columnRunnerAssertCount;
            
            private DataColumn columnRunnerMessage;
            
            private DataColumn columnRunnerStackTrace;
            
            private DataColumn columnTestRunTypeName;
            
            private DataColumn columnTesterName;
            
            private DataColumn columnExecutionStatusName;
            
            private DataColumn columnReleaseName;
            
            private DataColumn columnReleaseVersionNumber;
            
            internal TestRunDataTable() : 
                    base("TestRun") {
                this.InitClass();
            }
            
            internal TestRunDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TestRunIdColumn {
                get {
                    return this.columnTestRunId;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn TestCaseIdColumn {
                get {
                    return this.columnTestCaseId;
                }
            }
            
            internal DataColumn TestRunTypeIdColumn {
                get {
                    return this.columnTestRunTypeId;
                }
            }
            
            internal DataColumn TesterIdColumn {
                get {
                    return this.columnTesterId;
                }
            }
            
            internal DataColumn ExecutionStatusIdColumn {
                get {
                    return this.columnExecutionStatusId;
                }
            }
            
            internal DataColumn ReleaseIdColumn {
                get {
                    return this.columnReleaseId;
                }
            }
            
            internal DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            internal DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            internal DataColumn RunnerNameColumn {
                get {
                    return this.columnRunnerName;
                }
            }
            
            internal DataColumn RunnerTestNameColumn {
                get {
                    return this.columnRunnerTestName;
                }
            }
            
            internal DataColumn RunnerAssertCountColumn {
                get {
                    return this.columnRunnerAssertCount;
                }
            }
            
            internal DataColumn RunnerMessageColumn {
                get {
                    return this.columnRunnerMessage;
                }
            }
            
            internal DataColumn RunnerStackTraceColumn {
                get {
                    return this.columnRunnerStackTrace;
                }
            }
            
            internal DataColumn TestRunTypeNameColumn {
                get {
                    return this.columnTestRunTypeName;
                }
            }
            
            internal DataColumn TesterNameColumn {
                get {
                    return this.columnTesterName;
                }
            }
            
            internal DataColumn ExecutionStatusNameColumn {
                get {
                    return this.columnExecutionStatusName;
                }
            }
            
            internal DataColumn ReleaseNameColumn {
                get {
                    return this.columnReleaseName;
                }
            }
            
            internal DataColumn ReleaseVersionNumberColumn {
                get {
                    return this.columnReleaseVersionNumber;
                }
            }
            
            public TestRunRow this[int index] {
                get {
                    return ((TestRunRow)(this.Rows[index]));
                }
            }
            
            public event TestRunRowChangeEventHandler TestRunRowChanged;
            
            public event TestRunRowChangeEventHandler TestRunRowChanging;
            
            public event TestRunRowChangeEventHandler TestRunRowDeleted;
            
            public event TestRunRowChangeEventHandler TestRunRowDeleting;
            
            public void AddTestRunRow(TestRunRow row) {
                this.Rows.Add(row);
            }
            
            public TestRunRow AddTestRunRow(
                        string Name, 
                        int TestCaseId, 
                        int TestRunTypeId, 
                        int TesterId, 
                        int ExecutionStatusId, 
                        int ReleaseId, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string RunnerName, 
                        string RunnerTestName, 
                        int RunnerAssertCount, 
                        string RunnerMessage, 
                        string RunnerStackTrace, 
                        string TestRunTypeName, 
                        string TesterName, 
                        string ExecutionStatusName, 
                        string ReleaseName, 
                        string ReleaseVersionNumber) {
                TestRunRow rowTestRunRow = ((TestRunRow)(this.NewRow()));
                rowTestRunRow.ItemArray = new object[] {
                        null,
                        Name,
                        TestCaseId,
                        TestRunTypeId,
                        TesterId,
                        ExecutionStatusId,
                        ReleaseId,
                        StartDate,
                        EndDate,
                        RunnerName,
                        RunnerTestName,
                        RunnerAssertCount,
                        RunnerMessage,
                        RunnerStackTrace,
                        TestRunTypeName,
                        TesterName,
                        ExecutionStatusName,
                        ReleaseName,
                        ReleaseVersionNumber};
                this.Rows.Add(rowTestRunRow);
                return rowTestRunRow;
            }
            
            public TestRunRow FindByTestRunId(int TestRunId) {
                return ((TestRunRow)(this.Rows.Find(new object[] {
                            TestRunId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TestRunDataTable cln = ((TestRunDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TestRunDataTable();
            }
            
            internal void InitVars() {
                this.columnTestRunId = this.Columns["TestRunId"];
                this.columnName = this.Columns["Name"];
                this.columnTestCaseId = this.Columns["TestCaseId"];
                this.columnTestRunTypeId = this.Columns["TestRunTypeId"];
                this.columnTesterId = this.Columns["TesterId"];
                this.columnExecutionStatusId = this.Columns["ExecutionStatusId"];
                this.columnReleaseId = this.Columns["ReleaseId"];
                this.columnStartDate = this.Columns["StartDate"];
                this.columnEndDate = this.Columns["EndDate"];
                this.columnRunnerName = this.Columns["RunnerName"];
                this.columnRunnerTestName = this.Columns["RunnerTestName"];
                this.columnRunnerAssertCount = this.Columns["RunnerAssertCount"];
                this.columnRunnerMessage = this.Columns["RunnerMessage"];
                this.columnRunnerStackTrace = this.Columns["RunnerStackTrace"];
                this.columnTestRunTypeName = this.Columns["TestRunTypeName"];
                this.columnTesterName = this.Columns["TesterName"];
                this.columnExecutionStatusName = this.Columns["ExecutionStatusName"];
                this.columnReleaseName = this.Columns["ReleaseName"];
                this.columnReleaseVersionNumber = this.Columns["ReleaseVersionNumber"];
            }
            
            private void InitClass() {
                this.columnTestRunId = new DataColumn("TestRunId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTestRunId);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnTestCaseId = new DataColumn("TestCaseId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTestCaseId);
                this.columnTestRunTypeId = new DataColumn("TestRunTypeId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTestRunTypeId);
                this.columnTesterId = new DataColumn("TesterId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTesterId);
                this.columnExecutionStatusId = new DataColumn("ExecutionStatusId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionStatusId);
                this.columnReleaseId = new DataColumn("ReleaseId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReleaseId);
                this.columnStartDate = new DataColumn("StartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartDate);
                this.columnEndDate = new DataColumn("EndDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEndDate);
                this.columnRunnerName = new DataColumn("RunnerName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRunnerName);
                this.columnRunnerTestName = new DataColumn("RunnerTestName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRunnerTestName);
                this.columnRunnerAssertCount = new DataColumn("RunnerAssertCount", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRunnerAssertCount);
                this.columnRunnerMessage = new DataColumn("RunnerMessage", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRunnerMessage);
                this.columnRunnerStackTrace = new DataColumn("RunnerStackTrace", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRunnerStackTrace);
                this.columnTestRunTypeName = new DataColumn("TestRunTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTestRunTypeName);
                this.columnTesterName = new DataColumn("TesterName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTesterName);
                this.columnExecutionStatusName = new DataColumn("ExecutionStatusName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionStatusName);
                this.columnReleaseName = new DataColumn("ReleaseName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReleaseName);
                this.columnReleaseVersionNumber = new DataColumn("ReleaseVersionNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReleaseVersionNumber);
                this.Constraints.Add(new UniqueConstraint("pkTestRun", new DataColumn[] {
                                this.columnTestRunId}, true));
                this.columnTestRunId.AutoIncrement = true;
                this.columnTestRunId.AllowDBNull = false;
                this.columnTestRunId.ReadOnly = true;
                this.columnTestRunId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnTestCaseId.AllowDBNull = false;
                this.columnTestRunTypeId.AllowDBNull = false;
                this.columnTesterId.AllowDBNull = false;
                this.columnExecutionStatusId.AllowDBNull = false;
                this.columnStartDate.AllowDBNull = false;
                this.columnTestRunTypeName.ReadOnly = true;
                this.columnTesterName.ReadOnly = true;
                this.columnExecutionStatusName.ReadOnly = true;
                this.columnReleaseName.ReadOnly = true;
                this.columnReleaseVersionNumber.ReadOnly = true;
            }
            
            public TestRunRow NewTestRunRow() {
                return ((TestRunRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TestRunRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TestRunRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestRunRowChanged != null)) {
                    this.TestRunRowChanged(this, new TestRunRowChangeEvent(((TestRunRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestRunRowChanging != null)) {
                    this.TestRunRowChanging(this, new TestRunRowChangeEvent(((TestRunRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestRunRowDeleted != null)) {
                    this.TestRunRowDeleted(this, new TestRunRowChangeEvent(((TestRunRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestRunRowDeleting != null)) {
                    this.TestRunRowDeleting(this, new TestRunRowChangeEvent(((TestRunRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTestRunRow(TestRunRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TestRunRow : DataRow {
            
            private TestRunDataTable tableTestRun;
            
            internal TestRunRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestRun = ((TestRunDataTable)(this.Table));
            }
            
            public int TestRunId {
                get {
                    return ((int)(this[this.tableTestRun.TestRunIdColumn]));
                }
                set {
                    this[this.tableTestRun.TestRunIdColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableTestRun.NameColumn]));
                }
                set {
                    this[this.tableTestRun.NameColumn] = value;
                }
            }
            
            public int TestCaseId {
                get {
                    return ((int)(this[this.tableTestRun.TestCaseIdColumn]));
                }
                set {
                    this[this.tableTestRun.TestCaseIdColumn] = value;
                }
            }
            
            public int TestRunTypeId {
                get {
                    return ((int)(this[this.tableTestRun.TestRunTypeIdColumn]));
                }
                set {
                    this[this.tableTestRun.TestRunTypeIdColumn] = value;
                }
            }
            
            public int TesterId {
                get {
                    return ((int)(this[this.tableTestRun.TesterIdColumn]));
                }
                set {
                    this[this.tableTestRun.TesterIdColumn] = value;
                }
            }
            
            public int ExecutionStatusId {
                get {
                    return ((int)(this[this.tableTestRun.ExecutionStatusIdColumn]));
                }
                set {
                    this[this.tableTestRun.ExecutionStatusIdColumn] = value;
                }
            }
            
            public int ReleaseId {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.ReleaseIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ReleaseIdColumn] = value;
                }
            }
            
            public System.DateTime StartDate {
                get {
                    return ((System.DateTime)(this[this.tableTestRun.StartDateColumn]));
                }
                set {
                    this[this.tableTestRun.StartDateColumn] = value;
                }
            }
            
            public System.DateTime EndDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTestRun.EndDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.EndDateColumn] = value;
                }
            }
            
            public string RunnerName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.RunnerNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerNameColumn] = value;
                }
            }
            
            public string RunnerTestName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.RunnerTestNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerTestNameColumn] = value;
                }
            }
            
            public int RunnerAssertCount {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.RunnerAssertCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerAssertCountColumn] = value;
                }
            }
            
            public string RunnerMessage {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.RunnerMessageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerMessageColumn] = value;
                }
            }
            
            public string RunnerStackTrace {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.RunnerStackTraceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerStackTraceColumn] = value;
                }
            }
            
            public string TestRunTypeName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.TestRunTypeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.TestRunTypeNameColumn] = value;
                }
            }
            
            public string TesterName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.TesterNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.TesterNameColumn] = value;
                }
            }
            
            public string ExecutionStatusName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.ExecutionStatusNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ExecutionStatusNameColumn] = value;
                }
            }
            
            public string ReleaseName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.ReleaseNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ReleaseNameColumn] = value;
                }
            }
            
            public string ReleaseVersionNumber {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.ReleaseVersionNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ReleaseVersionNumberColumn] = value;
                }
            }
            
            public bool IsReleaseIdNull() {
                return this.IsNull(this.tableTestRun.ReleaseIdColumn);
            }
            
            public void SetReleaseIdNull() {
                this[this.tableTestRun.ReleaseIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsEndDateNull() {
                return this.IsNull(this.tableTestRun.EndDateColumn);
            }
            
            public void SetEndDateNull() {
                this[this.tableTestRun.EndDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunnerNameNull() {
                return this.IsNull(this.tableTestRun.RunnerNameColumn);
            }
            
            public void SetRunnerNameNull() {
                this[this.tableTestRun.RunnerNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunnerTestNameNull() {
                return this.IsNull(this.tableTestRun.RunnerTestNameColumn);
            }
            
            public void SetRunnerTestNameNull() {
                this[this.tableTestRun.RunnerTestNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunnerAssertCountNull() {
                return this.IsNull(this.tableTestRun.RunnerAssertCountColumn);
            }
            
            public void SetRunnerAssertCountNull() {
                this[this.tableTestRun.RunnerAssertCountColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunnerMessageNull() {
                return this.IsNull(this.tableTestRun.RunnerMessageColumn);
            }
            
            public void SetRunnerMessageNull() {
                this[this.tableTestRun.RunnerMessageColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunnerStackTraceNull() {
                return this.IsNull(this.tableTestRun.RunnerStackTraceColumn);
            }
            
            public void SetRunnerStackTraceNull() {
                this[this.tableTestRun.RunnerStackTraceColumn] = System.Convert.DBNull;
            }
            
            public bool IsTestRunTypeNameNull() {
                return this.IsNull(this.tableTestRun.TestRunTypeNameColumn);
            }
            
            public void SetTestRunTypeNameNull() {
                this[this.tableTestRun.TestRunTypeNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsTesterNameNull() {
                return this.IsNull(this.tableTestRun.TesterNameColumn);
            }
            
            public void SetTesterNameNull() {
                this[this.tableTestRun.TesterNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsExecutionStatusNameNull() {
                return this.IsNull(this.tableTestRun.ExecutionStatusNameColumn);
            }
            
            public void SetExecutionStatusNameNull() {
                this[this.tableTestRun.ExecutionStatusNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsReleaseNameNull() {
                return this.IsNull(this.tableTestRun.ReleaseNameColumn);
            }
            
            public void SetReleaseNameNull() {
                this[this.tableTestRun.ReleaseNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsReleaseVersionNumberNull() {
                return this.IsNull(this.tableTestRun.ReleaseVersionNumberColumn);
            }
            
            public void SetReleaseVersionNumberNull() {
                this[this.tableTestRun.ReleaseVersionNumberColumn] = System.Convert.DBNull;
            }
            
            public TestRunStepRow[] GetTestRunStepRows() {
                return ((TestRunStepRow[])(this.GetChildRows(this.Table.ChildRelations["fkTestRunTestRunStep"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TestRunRowChangeEvent : EventArgs {
            
            private TestRunRow eventRow;
            
            private DataRowAction eventAction;
            
            public TestRunRowChangeEvent(TestRunRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TestRunRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TestRunStepDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTestRunStepId;
            
            private DataColumn columnTestRunId;
            
            private DataColumn columnTestStepId;
            
            private DataColumn columnExecutionStatusId;
            
            private DataColumn columnDescription;
            
            private DataColumn columnPosition;
            
            private DataColumn columnExpectedResult;
            
            private DataColumn columnSampleData;
            
            private DataColumn columnActualResult;
            
            private DataColumn columnIncidentName;
            
            private DataColumn columnExecutionStatusName;
            
            internal TestRunStepDataTable() : 
                    base("TestRunStep") {
                this.InitClass();
            }
            
            internal TestRunStepDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TestRunStepIdColumn {
                get {
                    return this.columnTestRunStepId;
                }
            }
            
            internal DataColumn TestRunIdColumn {
                get {
                    return this.columnTestRunId;
                }
            }
            
            internal DataColumn TestStepIdColumn {
                get {
                    return this.columnTestStepId;
                }
            }
            
            internal DataColumn ExecutionStatusIdColumn {
                get {
                    return this.columnExecutionStatusId;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn PositionColumn {
                get {
                    return this.columnPosition;
                }
            }
            
            internal DataColumn ExpectedResultColumn {
                get {
                    return this.columnExpectedResult;
                }
            }
            
            internal DataColumn SampleDataColumn {
                get {
                    return this.columnSampleData;
                }
            }
            
            internal DataColumn ActualResultColumn {
                get {
                    return this.columnActualResult;
                }
            }
            
            internal DataColumn IncidentNameColumn {
                get {
                    return this.columnIncidentName;
                }
            }
            
            internal DataColumn ExecutionStatusNameColumn {
                get {
                    return this.columnExecutionStatusName;
                }
            }
            
            public TestRunStepRow this[int index] {
                get {
                    return ((TestRunStepRow)(this.Rows[index]));
                }
            }
            
            public event TestRunStepRowChangeEventHandler TestRunStepRowChanged;
            
            public event TestRunStepRowChangeEventHandler TestRunStepRowChanging;
            
            public event TestRunStepRowChangeEventHandler TestRunStepRowDeleted;
            
            public event TestRunStepRowChangeEventHandler TestRunStepRowDeleting;
            
            public void AddTestRunStepRow(TestRunStepRow row) {
                this.Rows.Add(row);
            }
            
            public TestRunStepRow AddTestRunStepRow(TestRunRow parentTestRunRowByfkTestRunTestRunStep, int TestStepId, int ExecutionStatusId, string Description, int Position, string ExpectedResult, string SampleData, string ActualResult, string IncidentName, string ExecutionStatusName) {
                TestRunStepRow rowTestRunStepRow = ((TestRunStepRow)(this.NewRow()));
                rowTestRunStepRow.ItemArray = new object[] {
                        null,
                        parentTestRunRowByfkTestRunTestRunStep[0],
                        TestStepId,
                        ExecutionStatusId,
                        Description,
                        Position,
                        ExpectedResult,
                        SampleData,
                        ActualResult,
                        IncidentName,
                        ExecutionStatusName};
                this.Rows.Add(rowTestRunStepRow);
                return rowTestRunStepRow;
            }
            
            public TestRunStepRow FindByTestRunStepId(int TestRunStepId) {
                return ((TestRunStepRow)(this.Rows.Find(new object[] {
                            TestRunStepId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TestRunStepDataTable cln = ((TestRunStepDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TestRunStepDataTable();
            }
            
            internal void InitVars() {
                this.columnTestRunStepId = this.Columns["TestRunStepId"];
                this.columnTestRunId = this.Columns["TestRunId"];
                this.columnTestStepId = this.Columns["TestStepId"];
                this.columnExecutionStatusId = this.Columns["ExecutionStatusId"];
                this.columnDescription = this.Columns["Description"];
                this.columnPosition = this.Columns["Position"];
                this.columnExpectedResult = this.Columns["ExpectedResult"];
                this.columnSampleData = this.Columns["SampleData"];
                this.columnActualResult = this.Columns["ActualResult"];
                this.columnIncidentName = this.Columns["IncidentName"];
                this.columnExecutionStatusName = this.Columns["ExecutionStatusName"];
            }
            
            private void InitClass() {
                this.columnTestRunStepId = new DataColumn("TestRunStepId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTestRunStepId);
                this.columnTestRunId = new DataColumn("TestRunId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTestRunId);
                this.columnTestStepId = new DataColumn("TestStepId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTestStepId);
                this.columnExecutionStatusId = new DataColumn("ExecutionStatusId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionStatusId);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnPosition = new DataColumn("Position", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPosition);
                this.columnExpectedResult = new DataColumn("ExpectedResult", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpectedResult);
                this.columnSampleData = new DataColumn("SampleData", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSampleData);
                this.columnActualResult = new DataColumn("ActualResult", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActualResult);
                this.columnIncidentName = new DataColumn("IncidentName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIncidentName);
                this.columnExecutionStatusName = new DataColumn("ExecutionStatusName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionStatusName);
                this.Constraints.Add(new UniqueConstraint("pkTestRunStep", new DataColumn[] {
                                this.columnTestRunStepId}, true));
                this.columnTestRunStepId.AutoIncrement = true;
                this.columnTestRunStepId.AllowDBNull = false;
                this.columnTestRunStepId.ReadOnly = true;
                this.columnTestRunStepId.Unique = true;
                this.columnTestRunId.AllowDBNull = false;
                this.columnExecutionStatusId.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnPosition.AllowDBNull = false;
                this.columnExecutionStatusName.ReadOnly = true;
            }
            
            public TestRunStepRow NewTestRunStepRow() {
                return ((TestRunStepRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TestRunStepRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TestRunStepRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestRunStepRowChanged != null)) {
                    this.TestRunStepRowChanged(this, new TestRunStepRowChangeEvent(((TestRunStepRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestRunStepRowChanging != null)) {
                    this.TestRunStepRowChanging(this, new TestRunStepRowChangeEvent(((TestRunStepRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestRunStepRowDeleted != null)) {
                    this.TestRunStepRowDeleted(this, new TestRunStepRowChangeEvent(((TestRunStepRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestRunStepRowDeleting != null)) {
                    this.TestRunStepRowDeleting(this, new TestRunStepRowChangeEvent(((TestRunStepRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTestRunStepRow(TestRunStepRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TestRunStepRow : DataRow {
            
            private TestRunStepDataTable tableTestRunStep;
            
            internal TestRunStepRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestRunStep = ((TestRunStepDataTable)(this.Table));
            }
            
            public int TestRunStepId {
                get {
                    return ((int)(this[this.tableTestRunStep.TestRunStepIdColumn]));
                }
                set {
                    this[this.tableTestRunStep.TestRunStepIdColumn] = value;
                }
            }
            
            public int TestRunId {
                get {
                    return ((int)(this[this.tableTestRunStep.TestRunIdColumn]));
                }
                set {
                    this[this.tableTestRunStep.TestRunIdColumn] = value;
                }
            }
            
            public int TestStepId {
                get {
                    try {
                        return ((int)(this[this.tableTestRunStep.TestStepIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.TestStepIdColumn] = value;
                }
            }
            
            public int ExecutionStatusId {
                get {
                    return ((int)(this[this.tableTestRunStep.ExecutionStatusIdColumn]));
                }
                set {
                    this[this.tableTestRunStep.ExecutionStatusIdColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableTestRunStep.DescriptionColumn]));
                }
                set {
                    this[this.tableTestRunStep.DescriptionColumn] = value;
                }
            }
            
            public int Position {
                get {
                    return ((int)(this[this.tableTestRunStep.PositionColumn]));
                }
                set {
                    this[this.tableTestRunStep.PositionColumn] = value;
                }
            }
            
            public string ExpectedResult {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.ExpectedResultColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.ExpectedResultColumn] = value;
                }
            }
            
            public string SampleData {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.SampleDataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.SampleDataColumn] = value;
                }
            }
            
            public string ActualResult {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.ActualResultColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.ActualResultColumn] = value;
                }
            }
            
            public string IncidentName {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.IncidentNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.IncidentNameColumn] = value;
                }
            }
            
            public string ExecutionStatusName {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.ExecutionStatusNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.ExecutionStatusNameColumn] = value;
                }
            }
            
            public TestRunRow TestRunRow {
                get {
                    return ((TestRunRow)(this.GetParentRow(this.Table.ParentRelations["fkTestRunTestRunStep"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fkTestRunTestRunStep"]);
                }
            }
            
            public bool IsTestStepIdNull() {
                return this.IsNull(this.tableTestRunStep.TestStepIdColumn);
            }
            
            public void SetTestStepIdNull() {
                this[this.tableTestRunStep.TestStepIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsExpectedResultNull() {
                return this.IsNull(this.tableTestRunStep.ExpectedResultColumn);
            }
            
            public void SetExpectedResultNull() {
                this[this.tableTestRunStep.ExpectedResultColumn] = System.Convert.DBNull;
            }
            
            public bool IsSampleDataNull() {
                return this.IsNull(this.tableTestRunStep.SampleDataColumn);
            }
            
            public void SetSampleDataNull() {
                this[this.tableTestRunStep.SampleDataColumn] = System.Convert.DBNull;
            }
            
            public bool IsActualResultNull() {
                return this.IsNull(this.tableTestRunStep.ActualResultColumn);
            }
            
            public void SetActualResultNull() {
                this[this.tableTestRunStep.ActualResultColumn] = System.Convert.DBNull;
            }
            
            public bool IsIncidentNameNull() {
                return this.IsNull(this.tableTestRunStep.IncidentNameColumn);
            }
            
            public void SetIncidentNameNull() {
                this[this.tableTestRunStep.IncidentNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsExecutionStatusNameNull() {
                return this.IsNull(this.tableTestRunStep.ExecutionStatusNameColumn);
            }
            
            public void SetExecutionStatusNameNull() {
                this[this.tableTestRunStep.ExecutionStatusNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TestRunStepRowChangeEvent : EventArgs {
            
            private TestRunStepRow eventRow;
            
            private DataRowAction eventAction;
            
            public TestRunStepRowChangeEvent(TestRunStepRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TestRunStepRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
